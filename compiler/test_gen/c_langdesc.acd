/* https://github.com/achaari/ac-language */

.base_type_dec  : [~(void, int, double, float, char) ;] ident;
.data_name      : ['*' +] ident ;

.struct_one_fld : <data_type_defs> <data_name> ['[' int ']' +] ';' ;
.struct_fields  : [ident] '{' <struct_one_fld> { ['}' ,] <struct_one_fld> * } ;

.data_type_defs : [~(struct, union) [<struct_fields> ;] ident ;] <base_type_dec> ;

.keyword typedef : <data_type_defs> <data_name> [',' <data_name> +] ';';

.variable :
    [%"*&"] ident ['[' int ']' +]
    ['(' { [')' ,] <expression> [',' <expression> +] ')' } ]
    [%(".", "->") <variable> ]
    ;
    
.base_expression : [literal ;][~sizeof '(' <variable> ['*'+] ')' ;][<variable> ;][%("!", "+", "-", "++", "--") <expression> ;] '(' <expression> ')';

.variable_type   : [~struct ident ;] <base_type_dec> ;

.cast_expression : '(' <variable_type> ['*' +] ')' <expression> ;

.expression : 
    [<cast_expression> ;]
    <base_expression> [%("++", "--")]
    [%"*/%" <expression> +]
    [%"+-" <expression> +]
    [%("<<", "<<") <expression> +]
    [%(">", "<", "<=", ">=") <expression> +]
    [%("==", "!=") <expression> +]
    ['&' <expression> +]
    ['^' <expression> +]
    ['|' <expression> +]
    ["&&" <expression> +]
    ["||" <expression> +] 
    ['?' <expression> ':' <expression>]
    [%("=", "+=", "-+", "*=", "/=", "&=", "|=", "^=", "%=", "<<=", ">>=") <expression> +]    
    ;
    
.preproc :
    [~include string ;]
    [~define ident int ;]
    ;
    
  
.name_declaration :  <variable_type> <data_name> ;

.statement_block : '{' { ['}' ,]  <one_statement> * };
    
.one_statement :
    [';' ;]
    [~(break, continue) ';' ;]
    [~return [';' ;] <expression> ';' ;]
    [<statement_block> ;]
    [~while '(' <expression> ')' <one_statement> ;]
    [~if '(' <expression> ')' <one_statement> [~else <one_statement> ] ;]
    [~switch '(' <expression> ')' '{' 
        [~case {[int,][char,]ident} ':' { [~break ';' ,] <one_statement> *} +] 
        [~default ':' <one_statement> { ['}' ,] [~break ';' '}' ,]  <one_statement> *} ;] 
    '}' ;]
    [~for '(' {[';' ,] <expression> ';'} {[';' ,] <expression> ';'} {[')' ,] <expression> ')'} <one_statement> ;]
    [<name_declaration> ['[' int ']' +] { ['=' <expression>] [',' ident ['[' int ']' +] * ] } ';' ;]
    <expression> ';'
    ;
 
.function : [~static ] <name_declaration> '(' [<name_declaration> [',' <name_declaration> +] ] ')' [';' ;] <statement_block> ;
    
.main : ['#' <preproc> ;] [^typedef ;] <function> ;
