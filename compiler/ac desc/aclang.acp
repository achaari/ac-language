%include "acdluti.h" 

/* CmplProc prototypes */
.statement_block;
.variable_declaration;
.function_definition;
.block_statement;
.expression;

/* Type definition, exmpl : Object, Package::Object, NameSpace::Package::Object */
.type_name : [~(void, int, double, float, char) ;] ident ["::" ident +] ;

/* variable/member reference or function call */
.variable_name   : ident ['(' [')' ;] { <expression> [',' *] } ')' ] ; 

.lamda_definition :
    /* nested fonction / lampda expression */
    ['(' { [')' ,] { ident [')' ,] ',' * } } ')' ['{' <block_statement> '}' ;] "=>" '(' <expression> ')' ;]
    
    /* function pointer */
    <type_name> ['.'  <variable_name> + ] ;
    
.variable_expression :

    /* literal value : constante (int, float, char) or string literal */
    [literal ;]
    
    /* lampda expression */
    [ '@' <lamda_definition> ;]
    
    /* typeof / sizeof functions */
    [ ~(typeof, sizeof) '(' <type_name> ')' ;]
    
    /* parenth expression */
    ['(' <expression> ')' ;]
    
    /* Variable reference or fonction call */
    [ '$' ] <variable_name>;
    
.unit_expression : 
    
    /* primary expression */
    <variable_expression> [ %("->", "::", ":", ".")  <variable_name> + ] 
       
    /* expression postfix */ 
    [ %("++", "--") ]    

    /* Type cast */
    [ ~as <type_name> ]    
    
    /* affectation operator */
    [ %("=", "+=", "-=", "*=", "/=", "&=", "|=", "<<=", ">>=") <expression> ] 
    
    /* arithmetic or logic operator */
    [ %("||", "&&", "|", "&", "==", ">=", "<=", ">>", "<<", ">", "<", "!=", "+", "-", "*", "/", "^") <expression> ] 
    ;
    
.expression : 
    [ %("++", "--") <expression> ; ]  /* expression Prefix  */
    [ %"!-+&*~" ] <unit_expression> 
    [ ~(is, extend) <type_name> ]
    [ '?' <expression> ':' <expression> ]
    ;

/* label defition (goto) */
.label_definition : ident ':' ;

.expression_statement : 
    [ ';' ; ]                    /* No opration statement */
    [ <variable_declaration> ;]
    <expression> ';' 
    ;

.keyword if      : '(' <expression> ')' <block_statement> [~else <block_statement> ] ;
.keyword while   : '(' <expression> ')' <block_statement> ;
.keyword do      : <block_statement> ~while '(' <expression> ')' ';' ;
.keyword switch  : '(' <expression> ')' '{' [~case literal ':' <block_statement> +] [~default ':' <block_statement>] '}';
.keyword for     : '(' <expression_statement>  [<expression>] ';'  [<expression>] ')'  <block_statement> ;
.keyword foreach : '(' <expression> ~in <expression> [ ':' <expression> ] ')' <block_statement> ;
    

.block_statement : 
    [ <label_definition>  ;]  
    [ ^(if, while, do, switch, for, foreach) ;]     
    [ ~(break,continue) ';' ;]   
    [ ~goto ident ';' ;]
    [ ~return [<expression>] ';' ;]    
    [ '{' { ['}' ,] <block_statement> * } ;]             
    <expression_statement> 
    ;

.variable_definition : ident [ ~as <type_name> ] [ '=' <expression> ] ;

.object_member : 
    [ ~(public, private, protected, internal, extern, sealed, static, virtual, const)] 
    [ ~var <variable_definition> ';' ;]
    <function_definition> ;

/* CmplProc entry-point */
.variable_declaration : ~(local,global) <variable_definition> [',' <variable_definition> ;] ';' ;
.function_definition  : ~function ident '(' [ident [',' ident +]  ] ')' [';' ;] '{' [<block_statement> +] '}' ;
.object_definition    : ~object ident [':' { <type_name> [',' *] } ] '{' { <object_member> ['}' ';' ,] * } ;

/* Main CmplProc */
.main : 
    [<variable_declaration> ;]
    [<object_definition>    ;]
    [<function_definition>  ;] 
    
/* C-code : */
    [~extern ~C_CODE '{' [<c_code_block> + ] '}' ;]    
    ;

.base_type : [~(void, int, double, float, char) ;] [~struct ident ;] ident ;
   
.data_type : <base_type> ['*' +];

.c_expressions  : literal;
.c_codeblock    : literal;
.c_variable_dec : {['*' *]} ident ['[' <c_expressions> ']' + ] [ '=' <c_expressions> ];
.c_declaration  : [~static][~const] <base_type> <c_variable_dec>  [ ',' <c_variable_dec> + ]  ';';
.c_function : [~static][~const] <data_type> ident '(' [<data_type> ident { [',' <data_type> ident * ] } ] ')' [';' ;] '{' <c_codeblock> '}';

.sig_fct_args : [<data_type> [ident] ];
.fct_ptr_id   : '(' '*' { [ident ,] <fct_ptr_id> } ')' '(' [<sig_fct_args>] ')';
.function_ptr : <data_type> <fct_ptr_id> ';';

.keyword typedef : [<function_ptr> ;];

.c_code_block : [<c_function> ;][^typedef ;];

/**/
