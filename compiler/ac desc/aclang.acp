%include "acdluti.h" 

/* CmplProc prototypes */
.statement_block;
.variable_declaration;
.function_definition;
.block_statement;
.expression;

/* Type definition, exmpl : Object, Package::Object, NameSpace::Package::Object */
.type_name : {ident ["::" *] } ;

/* variable/member reference or function call */
.variable_name   : ident ['(' [')' ;] { <expression> [',' *] } ')' ] ; 

.lamda_definition :
    /* nested fonction / lampda expression */
    ['(' { [')' ,] { ident [')' ,] ',' * } } ')' ['{' <block_statement> '}' ;] "=>" '(' <expressions> ')' ;]
    
    /* function pointer */
    <type_name> { ['.'  <variable_name> * ] };
    
.variable_expression :

    /* literal value : constante (int, float, char) or string literal */
    [literal ;]
    
    /* lampda expression */
    [ '@' <lamda_definition> ;]
    
    /* typeof / sizeof functions */
    [ ~(typeof, sizeof) '(' <type_name> ')' ;]
    
    /* parenth expression */
    ['(' <expressions> ')' ;]
    
    /* Variable reference or fonction call */
    [ '$' ] <variable_name>;
    
.unit_expression : 
    
    /* primary expression */
    <variable_expression> { [ %("->", "::", ":", ".")  <variable_name> * ] }
       
    /* expression postfix */ 
    [ %("++", "--") ]    

    /* Type cast */
    [ ~as <type_name> ]    
    
    /* affectation operator */
    [ %("=", "+=", "-=", "*=", "/=", "&=", "|=", "<<=", ">>=") <expression> ] 
    
    /* arithmetic or logic operator */
    [ %("||", "&&", "|", "&", "==", ">=", "<=", ">>", "<<", ">", "<", "!=", "+", "-", "*", "/", "^") <expression> ] 
    ;
    
.expression : 
    [ %("++", "--") <expression> ; ]  /* expression Prefix  */
    [ %"!-+&*~" <unit_expression> ]
    [ ~(is, extend) <type_name> ]
    [ '?' <expression> ':' <expression> ]
    ;

/* label defition (goto) */
.label_definition : ident ':' ;

.expression_statement : 
    [ ';' ; ]                    /* No opration statement */
    [ <label_definition>  ;]              
    [ ~(break,continue) ';' ;]   
    [ ~goto ident ';' ;]
    [ ~return [<expression>] ';' ;]
    [ <variable_declaration> ;]
    <expression> ';' 
    ;

.keyword if : '(' <expression> ')' <block_statement> [~else <block_statement> ] ;

.block_statement : 
    [ <statement_block> ;]
    [ ^if ;] 
    [ ~while '(' <expression> ')' <block_statement> ;]
    [ ~do <block_statement> ~while '(' <expression> ')' ';' ;] 
    [ ~switch '(' <expression> ')' '{' { ['}' ,] [~default ':' <block_statement> '}' ,] ~case literal ':' <block_statement> * } ;]
    [ ~for '(' <expression_statement> { [';' ,] <expression>  ';'} {[')' ,] <expression> ')' } <block_statement> ;]
    [ ~foreach '(' <expression> ~in <expression> [ ':' <expression> ] ')' <block_statement> ;]
    <expression_statement> 
    ;
    
.statement_block : '{' { ['}' ,] <block_statement> * } ;

.variable_definition : ident [ ~as <type_name> ] [ '=' <expression> ] ;

.object_member : 
    [ ~(public, private, protected, internal, extern, sealed, static, virtual, const)] 
    [ ~var <variable_definition> ';' ;]
    <function_definition> ;

/* CmplProc entry-point */
.variable_declaration : ~(local,global) <variable_definition> [',' <variable_definition> ;] ';' ;
.function_definition  : ~function ident '(' { [')' ,] { ident [')' ,] ',' * } } [';' ;] <statement_block> ;
.object_definition    : ~object ident [':' { <type_name> [',' *] } ] '{' { <object_member> ['}' ';' ,] * } ;

/* Main CmplProc */
.main : 
    [<variable_declaration> ;]
    [<object_definition>    ;]
    [<function_definition>  ;] 
    ;
